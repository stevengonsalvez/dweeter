<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:file="http://www.mulesoft.org/schema/mule/file"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns:tls="http://www.mulesoft.org/schema/mule/tls"
	xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:ws="http://www.mulesoft.org/schema/mule/ws"
	xmlns:quartz="http://www.mulesoft.org/schema/mule/quartz" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/quartz http://www.mulesoft.org/schema/mule/quartz/current/mule-quartz.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ws http://www.mulesoft.org/schema/mule/ws/current/mule-ws.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/tls http://www.mulesoft.org/schema/mule/tls/current/mule-tls.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd">
	<http:request-config name="def_http_request_config"
		doc:name="HTTP Request Configuration" />
	<http:listener-config name="def_http_listener"
		host="0.0.0.0" port="8082" basePath="/inventory" doc:name="HTTP Listener Configuration" />
	<!-- <ws:consumer-config name="sekoServiceConsumer" wsdlLocation="./wsdl/DcsWebService.wsdl" 
		service="DcsWebServiceService" port="DcsWebServicePort" serviceAddress="http://usp.sekosynergy.co.uk:8880/dispwms_dcs/dcswebservice/DcsWebService" 
		doc:name="Web Service Consumer"/> -->


	<global-property name="logger.cs-inventory-integration"
		value="com.cs.mule.configfile.cs-inventory-integration" doc:name="Logger" />

	<global-property name="logger.cs-inventory-integration-error"
		value="com.cs.mule.configfile.cs-error" doc:name="Logger" />


	<http:request-config name="cs_http_request_config"
		doc:name="HTTP Request Configuration" protocol="HTTPS">
		
		
		<!-- #Shame Code - pre-emptive parameter does not exist in 3.6 - when we upgrade to 3.6 use this and uncomment the Auth header part
		
		<http:basic-authentication username="${cs_user}"
			password="${cs_password}" preemptive="true"/>  -->
		<tls:context>
			<tls:trust-store path="./security/cs_truststore.jks"
				password="password" type="jks" />
		</tls:context>
	</http:request-config>

	<flow name="time-trigger-synch">
		<poll doc:name="Poll">
			<fixed-frequency-scheduler frequency="${synch.frequency}" timeUnit="SECONDS"/>
			<flow-ref name="retrieveinventory" doc:name="retrieveinventory" />
		</poll>
       	<vm:outbound-endpoint ref="vm-cs-requ-ep"
			doc:name="VM_CS_INVENTORY" />
	</flow>
	
	<flow name="update-cs-inventory-api">
		<vm:inbound-endpoint ref="vm-cs-requ-ep" doc:name="VM_CS_INVENTORY">
			<idempotent-redelivery-policy
				idExpression="#[message.id]" maxRedeliveryCount="${cs.retryable.exc.max.redeliveries}" />
			<vm:transaction action="ALWAYS_BEGIN" />
		</vm:inbound-endpoint>
		
	 <flow-ref name="entry-log" doc:name="entry-log"/>
        <logger message="---------- Position: Entry ||subflow : Null || FlowName : #[flow.name] || MessageId: #[sessionVars.messageId]" level="INFO" category="${logger.cs-inventory-integration}" doc:name="info log"/>
        <flow-ref name="cs_init_params" doc:name="cs_init_params"/>
		<flow-ref name="map-to-cs-api" doc:name="map-to-cs-api" />
		<vm:outbound-endpoint ref="vm-es-requ-ep"
			doc:name="VM_ELK" />
        <logger message="#[logIn('Invoking the CS API')] " level="DEBUG" category="${logger.cs-inventory-integration}" doc:name="Debug_CS_Request"/>
		<http:request config-ref="cs_http_request_config" path="${cs_url}"
			method="POST" doc:name="invoke_cs_api" host="${cs_host}"
			port="443">
			<http:request-builder>
                <http:header headerName="Authorization" value="${cs_basicauth}"/>
                </http:request-builder>
			<http:success-status-code-validator
				values="200,202,204" />
		</http:request>
		<logger message="#[logOut('output from the CS API')] " level="DEBUG" category="${logger.cs-inventory-integration}" doc:name="Debug_CS_Response"/>
			
		<logger
			message="---------- Position: Exit || subflow : Null || FlowName : #[flow.name] || MessageId: #[sessionVars.messageId] || InboundProperties : #[message.inboundProperties]"
			level="INFO" doc:name="info log" category="${logger.cs-inventory-integration}" />
		
		<catch-exception-strategy doc:name="Catch_Exception">
				<logger message="#[logExc('a exception occured when trying to retrieve and update inventory from seko')]" level="ERROR"
					category="${logger.cs-inventory-integration-error}" doc:name="Logger" />
		</catch-exception-strategy>
	
	</flow>
	
	
	<flow name="log_in_elasticsearch" processingStrategy="synchronous">

		<vm:inbound-endpoint ref="vm-es-requ-ep" doc:name="VM elk requests">
			<idempotent-redelivery-policy
				idExpression="#[message.id]" maxRedeliveryCount="${etc.retryable.exc.max.redeliveries}" />
			<vm:transaction action="ALWAYS_BEGIN" />
		</vm:inbound-endpoint>
        <flow-ref name="entry-log" doc:name="entry-log"/>
		<logger
			message="---------- Position: Entry || subflow : Null || FlowName : #[flow.name] || MessageId: #[sessionVars.messageId]"
			level="INFO" doc:name="info log" category="${logger.cs-inventory-integration}" />
        <scripting:component doc:name="Groovy">
            <scripting:script engine="Groovy"><![CDATA[import groovy.json.JsonSlurper
import groovy.json.JsonOutput


def slurper = new JsonSlurper()

def jsonMap = slurper.parseText(payload);
jsonMap.timestamp=new Date().format("yyyy-MM-dd'T'HH:mm:ss");

payload = JsonOutput.toJson(jsonMap);]]></scripting:script>
        </scripting:component>
        <choice doc:name="Choice">
            <when expression="#[ '${elk}' == 'Y']">
                <http:request config-ref="http_etc_shared" path="cs-inventory-#[server.dateTime.year].#[server.dateTime.format('MM')].#[server.dateTime.format('dd')]/inventory/#[function:uuid]" method="PUT" host="${etc.host}" port="${etc.port}" doc:name="etc_log"/>
                <logger message="---------- Position: Exit || subflow : Null || FlowName : #[flow.name] || MessageId:  || elasticsearchstatuscode : #[message.InboundProperties.'http.status']" level="INFO" category="${logger.cs-inventory-integration}" doc:name="info log"/>
            </when>
            <otherwise>
            	<logger message="---------- Position: Exit || subflow : Null || FlowName : #[flow.name] || MessageId:  || Not Logged To ELK || Payload : #[payload]" level="INFO" category="${logger.cs-inventory-integration}" doc:name="info log"/>
            </otherwise>
        </choice>
		<choice-exception-strategy doc:name="etc-exc-strategy">
			<rollback-exception-strategy when="true"
				maxRedeliveryAttempts="${etc.invoke.retryable.exc.max.redeliveries}"
				doc:name="retryable audit exception">
				<logger
					message="#[logExc('a retryable exception occurred trying to call elasticsearch to log for egiftcard')]"
					level="ERROR" category="${logger.cs-inventory-integration}" doc:name="retryable exception" />
				<on-redelivery-attempts-exceeded>
					<logger
						message="#[logExc('giving up after too many retryable exceptions occurred trying to log to elasticsearch')]"
						level="ERROR" category="${logger.cs-inventory-integration}" doc:name="giving up retrying" />
				</on-redelivery-attempts-exceeded>
			</rollback-exception-strategy>
		</choice-exception-strategy>
	</flow>

	<flow name="invoke_retrieveInventory">
		<http:listener config-ref="def_http_listener" path="/seko"
			doc:name="HTTP" />
        <flow-ref name="entry-log" doc:name="entry-log"/>
		<flow-ref name="retrieveinventory" doc:name="retrieveinventory-seko" />
		<flow-ref name="map-to-cs-api" doc:name="map-to-cs-api" />
<choice-exception-strategy doc:name="Choice Exception Strategy">
			<catch-exception-strategy doc:name="default">
				<logger message="#[logExc('a exception occured when trying to retrieve and update inventory from seko')]" level="ERROR"
					category="${logger.cs-inventory-integration-error}" doc:name="Logger" />
			</catch-exception-strategy>
		</choice-exception-strategy>
	</flow>
	
	
	<!-- #Shame Code - This bit of code needs to be replaced with a groovy init script . Groovy is not able to recognise properties loaded through jasypt property configurer-->
	
	
    <sub-flow name="seko_init_params">
    
    	<set-session-variable variableName="runEnv" value="${runEnv}" doc:name="Set_Run_environment" />
        <set-variable variableName="seko_authKey" value="${seko_authKey}" doc:name="seko_authkey_init"/>
        <set-variable variableName="seko_password" value="${seko_password}" doc:name="seko_password_init"/>
       
    </sub-flow>
    
     <sub-flow name="cs_init_params">
    
    	<set-session-variable variableName="runEnv" value="${runEnv}" doc:name="Set_Run_environment" />
        <set-session-variable variableName="locationId" value="${sekoLocation}" doc:name="Set_Seko_Location" />
        
    </sub-flow>


	<!--  End of #Shame Code -->
		

	<sub-flow name="map-to-cs-api">
        <flow-ref name="entry-log" doc:name="Flow Reference"/>
		<logger
			message="---------- Position: Entry || subflow : map-to-cs-api || FlowName : #[flow.name] || MessageId: #[sessionVars.messageId]"
			level="INFO" doc:name="info log" category="${logger.cs-inventory-integration}" />
		<mulexml:xslt-transformer xsl-file="./xslt/seko-response-cs-request-xml.xslt"
			maxIdleTransformers="2" maxActiveTransformers="5" doc:name="XSLT">
			<mulexml:context-property key="requestId"
				value="#[function:uuid]"></mulexml:context-property>
            <mulexml:context-property key="sekoLocation" value="#[sessionVars.locationId]"/>
		</mulexml:xslt-transformer>
		<json:xml-to-json-transformer doc:name="XML to JSON" />
		<scripting:component doc:name="Groovy">
			<scripting:script engine="Groovy"
				file="./groovy/convert-to-cs-api-quantity-json.groovy"></scripting:script>
		</scripting:component>
		<logger
			message="---------- Position: Exit || subflow : map-to-cs-api || FlowName : #[flow.name] || MessageId: #[sessionVars.messageId]"
			level="INFO" doc:name="info log" category="${logger.cs-inventory-integration}" />
		
	</sub-flow>
	<sub-flow name="retrieveinventory">
        <flow-ref name="entry-log" doc:name="entry-log"/>
        <flow-ref name="seko_init_params" doc:name="seko_init_params"/>
		<logger
			message="---------- Position: Entry || subflow : retrieveinventory || FlowName : #[flow.name] || MessageId: #[sessionVars.messageId] || env : ${runEnv}"
			level="INFO" doc:name="info log" category="${logger.cs-inventory-integration}" />
		
		

		<parse-template location="./samples/DcsWebService.xml"
			doc:name="Parse Template" />
        <logger message="#[logIn('Payload invocation to Seko')]" level="DEBUG" category="${logger.cs-inventory-integration}" doc:name="Logger"/>
		<http:request config-ref="def_http_request_config"
			path="/dispwms_dcs/dcswebservice/DcsWebService" method="POST"
			doc:name="HTTP" host="usp.sekosynergy.co.uk" port="8880" />
		<byte-array-to-string-transformer
			doc:name="Byte Array to String" />
		<logger message="#[logIn('Seko Response')]" level="DEBUG" category="${logger.cs-inventory-integration}" doc:name="Logger"/>
		<logger
			message="---------- Position: Exit || subflow : retrieveinventory || FlowName : #[flow.name] || MessageId: #[sessionVars.messageId] || env : ${runEnv}"
			level="INFO" doc:name="info log" category="${logger.cs-inventory-integration}" />


	</sub-flow>

</mule>

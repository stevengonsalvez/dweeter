<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:core="http://www.mulesoft.org/schema/mule/core"
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns="http://www.mulesoft.org/schema/mule/core" 
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" 
	xmlns:spring="http://www.springframework.org/schema/beans"
	xmlns:mule-ss="http://www.mulesoft.org/schema/mule/spring-security" 
	xmlns:ss="http://www.springframework.org/schema/security"
	version="CE-3.6.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/spring-security http://www.mulesoft.org/schema/mule/spring-security/3.1/mule-spring-security.xsd
http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd">

	<!-- identifies the current M&S environment (mns.env.deploytime is substituted by its value at deploytime) -->
	<!-- <global-property name="mns.env" value="${mns.env.deploytime}" doc:name="mns.env" /> -->

	<spring:beans>
		<spring:bean id="seko-service-props" name="seko-service-props" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
			<spring:property name="locations">
				<spring:list value-type="org.springframework.core.io.Resource">
					<spring:value>classpath:seko-service.properties</spring:value>
				</spring:list>
			</spring:property>
			<spring:property name="ignoreResourceNotFound" value="false" />
		</spring:bean>
	</spring:beans>

	<!-- specify location only to satisfy Studio - it's not used -->
	<context:property-placeholder location="application.properties"/>
	<configuration doc:name="Common Configuration">
		<expression-language>
			<import class="org.springframework.util.Assert" />
			<import class="java.util.Map" />
			<import class="java.util.List" />
			<import class="org.apache.log4j.NDC" />
			<import class="org.slf4j.MDC" />
			<global-functions><![CDATA[
			def props()                             { return app.registry.get('seko-service-props'); }
			def svcPropDef(propName, runEnv)        { return props().getProperty( runEnv + "." + propName, "test"); }
			def svcProp(propName)                   { return svcPropDef(propName, sessionVars.runEnv); }
			def where()                { return "in flow " + flow.name + " in app " + app.name; }
			def assertType(clazz)      { Assert.isInstanceOf(clazz, payload, "payload is of unexpected type " + where() + ": "); }
			def assertNotNull()        { Assert.notNull(payload, "payload is null " + where() + ": "); }
			def assertContains(str)    { Assert.isTrue(payload is String && payload.contains(str), "payload does not contain [" + str + "] " + where() + ": "); }
        	def throw(msg)             { Assert.isTrue(false, msg); }
			def cleanProps(map)        { result = new java.util.LinkedHashMap(map); result.remove('MULE_SESSION'); result.remove('LOCAL_CERTIFICATES'); return result; }
			def logPush()      { NDC.push(message.id); }
			def trackMsg()	   { MDC.put("Tracking_Id", message.id); }
			def logPop()       { NDC.pop(); }
	        def logIn(msg)     { return msg + " || flow: " + flow.name + " | app: " + app.name + " | node: " + mule.nodeId + " || inbound props: "  + cleanProps(message.inboundProperties)                                                                   + " | flow vars: " + flowVars + " | session vars: " + sessionVars + " | inbound payload  " + message.payloadAs(String); }
	        def logOut(msg)    { return msg + " || flow: " + flow.name + " | app: " + app.name + " | node: " + mule.nodeId + " || outbound props: " + cleanProps(message.outboundProperties) + " | flow vars: " + flowVars + " | session vars: " + sessionVars + " | outbound payload " + message.payloadAs(String); }
	        def logExc(msg)    { return msg + " || flow: " + flow.name + " | app: " + app.name + " | node: " + mule.nodeId + " || inbound props: "  + cleanProps(message.inboundProperties) +  " | outbound props: " + cleanProps(message.outboundProperties) + " | flow vars: " + flowVars + " | session vars: " + sessionVars + " | outbound payload " + message.payloadAs(String); }
	        def setPayKey(key) { HeaderUtil.setPayKey(sessionVars, key); }
	        def auditPayload(msg, pl) {
	          apl = [
	            "context" : [ "message" : msg, "app" : app.name, "node" : mule.nodeId, "cluster" : mule.clusterId ], 
	            "header"  : [ "inboundProperties" : cleanProps(message.inboundProperties), "flowVars" : flowVars, "sessionVars" : sessionVars, "outboundProperties" : cleanProps(message.outboundProperties) ]
	          ];
	          if (pl == null || (pl != 'false' && pl != false)) {
	          	if (payload != null && (payload is String || payload is Map || payload is List)) apl['payload'] = payload;
	          }
	          return apl;
	        }
        	]]></global-functions>
		</expression-language>
	</configuration>
	
	<http:request-config name="elastic_http_request_config" host="${etc.host}" port="${etc.port}" responseTimeout="5000" doc:name="HTTP Request Configuration">
        <http:basic-authentication username="${etc.username}" password="${etc.password}"/>
    </http:request-config>
	
	<global-property name="logger.common-mule-config"
		value="com.fl3x.mule.configfile.common-mule-config" doc:name="Logger" />
		
	<!-- security manager configuration for this app, specifically for the services it exposes -->
	<spring:beans>
		<ss:authentication-manager alias="service-auth-mgr">
			<ss:authentication-provider>
				<ss:user-service id="user-svc">
					<ss:user name="${service.auth.username}" password="${service.auth.password}" authorities="ROLE_ADMIN" />
				</ss:user-service>
			</ss:authentication-provider>
		</ss:authentication-manager>
	</spring:beans>
	<mule-ss:security-manager name="service-sec-mgr">
		<mule-ss:delegate-security-provider name="service-memory-sec-provider" delegate-ref="service-auth-mgr" />
	</mule-ss:security-manager>
	
	<http:connector name="http-conn-shared" validateConnections="true" keepAlive="true" sendTcpNoDelay="true" doc:name="HTTP Connector" clientSoTimeout="10000" cookieSpec="netscape" receiveBacklog="0" receiveBufferSize="0" sendBufferSize="0" serverSoTimeout="10000" socketSoLinger="0">
		<core:receiver-threading-profile poolExhaustedAction="DISCARD" maxThreadsActive="${http.conn.max.threads.active}"
			maxThreadsIdle="${http.conn.max.threads.idle}" />
		<core:service-overrides sessionHandler="org.mule.session.NullSessionHandler" />
	</http:connector>
	
	<http:endpoint name="order-api-ep" address="http://${service.ep.host}:${service.ep.default.http.port}${frontend.api.ep.path}"
		keepAlive="true" connector-ref="http-conn-shared" doc:name="order API HTTP endpoint">
		<!-- <mule-ss:http-security-filter realm="fl3x Service Authentication" securityManager-ref="service-sec-mgr" /> -->
	</http:endpoint>
	<http:endpoint name="order-api-console-ep" address="http://${service.ep.host}:${service.ep.default.http.port}${frontend.api.console.ep.path}"
		keepAlive="true" connector-ref="http-conn-shared" doc:name=" API console HTTP endpoint">
		<!-- <mule-ss:http-security-filter realm="fl3x Service Authentication" securityManager-ref="service-sec-mgr" /> -->
	</http:endpoint>
	
	<!-- call this flow from all flows in your app which communicate outside that app. Call it immediately after entering such a flow, then call audit-common. -->
	<sub-flow name="entry-log" >
		<expression-component doc:name="Push Log Context"><![CDATA[logPush();
trackMsg();
]]></expression-component>
		<set-variable variableName="auditMessage" value="entered" doc:name="audit message" />
	</sub-flow>
</mule>

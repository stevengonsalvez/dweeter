<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:context="http://www.springframework.org/schema/context" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:spring="http://www.springframework.org/schema/beans"
	version="CE-3.6.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd">

	<!-- identifies the current M&S environment (mns.env.deploytime is substituted by its value at deploytime) -->
	<!-- <global-property name="mns.env" value="${mns.env.deploytime}" doc:name="mns.env" /> -->

	<spring:beans>
		<spring:bean id="dashboard-service-props" name="dashboard-service-props" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
			<spring:property name="locations">
				<spring:list value-type="org.springframework.core.io.Resource">
					<spring:value>classpath:dashboard-service.properties</spring:value>
				</spring:list>
			</spring:property>
			<spring:property name="ignoreResourceNotFound" value="false" />
		</spring:bean>
	</spring:beans>

	<!-- specify location only to satisfy Studio - it's not used -->
	<context:property-placeholder properties-ref="dashboard-service-props" location="unused"
		ignore-resource-not-found="true" />
	<context:property-placeholder location="application.properties"/>
	<configuration doc:name="Common Configuration">
		<expression-language>
			<import class="org.springframework.util.Assert" />
			<import class="java.util.Map" />
			<import class="java.util.List" />
			<import class="org.apache.log4j.NDC" />
			<global-functions><![CDATA[
			def where()                { return "in flow " + flow.name + " in app " + app.name; }
			def assertType(clazz)      { Assert.isInstanceOf(clazz, payload, "payload is of unexpected type " + where() + ": "); }
			def assertNotNull()        { Assert.notNull(payload, "payload is null " + where() + ": "); }
			def assertContains(str)    { Assert.isTrue(payload is String && payload.contains(str), "payload does not contain [" + str + "] " + where() + ": "); }
        	def throw(msg)             { Assert.isTrue(false, msg); }
			def cleanProps(map)        { result = new java.util.LinkedHashMap(map); result.remove('MULE_SESSION'); result.remove('LOCAL_CERTIFICATES'); return result; }
			def logPush()      { NDC.push(message.id); }
			def logPop()       { NDC.pop(); }
	        def logIn(msg)     { return msg + " || flow: " + flow.name + " | app: " + app.name + " | node: " + mule.nodeId + " || inbound props: "  + cleanProps(message.inboundProperties)                                                                   + " | flow vars: " + flowVars + " | session vars: " + sessionVars + " | inbound payload  " + message.payloadAs(String); }
	        def logOut(msg)    { return msg + " || flow: " + flow.name + " | app: " + app.name + " | node: " + mule.nodeId + " || outbound props: " + cleanProps(message.outboundProperties) + " | flow vars: " + flowVars + " | session vars: " + sessionVars + " | outbound payload " + message.payloadAs(String); }
	        def logExc(msg)    { return msg + " || flow: " + flow.name + " | app: " + app.name + " | node: " + mule.nodeId + " || inbound props: "  + cleanProps(message.inboundProperties) +  " | outbound props: " + cleanProps(message.outboundProperties) + " | flow vars: " + flowVars + " | session vars: " + sessionVars + " | outbound payload " + message.payloadAs(String); }
	        def auditPayload(msg, pl) {
	          apl = [
	            "context" : [ "message" : msg, "app" : app.name, "node" : mule.nodeId, "cluster" : mule.clusterId ], 
	            "header"  : [ "inboundProperties" : cleanProps(message.inboundProperties), "flowVars" : flowVars, "sessionVars" : sessionVars, "outboundProperties" : cleanProps(message.outboundProperties) ]
	          ];
	          if (pl == null || (pl != 'false' && pl != false)) {
	          	if (payload != null && (payload is String || payload is Map || payload is List)) apl['payload'] = payload;
	          }
	          return apl;
	        }
        	]]></global-functions>
		</expression-language>
	</configuration>
	
	<global-property name="logger.common-mule-config"
		value="com.fl3x.mule.configfile.common-mule-config" doc:name="Logger" />
	
</mule>

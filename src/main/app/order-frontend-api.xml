<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml" xmlns:core="http://www.mulesoft.org/schema/mule/core"
	xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:apikit="http://www.mulesoft.org/schema/mule/apikit"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:spring="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/apikit http://www.mulesoft.org/schema/mule/apikit/current/mule-apikit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd"
	version="CE-3.6.1">

	<global-property name="logger.order-api"
		value="com.fl3x.mule.configfile.order-api" doc:name="Logger" />

	<apikit:config name="order-api-config" raml="order-api.raml" consoleEnabled="false" doc:name="Router" />
    
	<apikit:mapping-exception-strategy
		name="default-exc-strategy-api-xml">
		<apikit:mapping statusCode="400">
			<apikit:exception
				value="org.mule.module.apikit.exception.BadRequestException" />
			<logger message="#[logExc('Bad request')]" level="INFO"
				category="${logger.common-mule-config}" doc:name="Bad request" />
			<set-property propertyName="Content-Type" value="application/xml"
				doc:name="XML" />
			<set-payload
				value="&lt;message&gt;Bad request: #[exception.causeException.message]&lt;/message&gt;"
				doc:name="Bad request" />
		</apikit:mapping>
		<apikit:mapping statusCode="401">
			<apikit:exception value="org.mule.api.security.UnauthorisedException" />
			<logger message="#[logExc('Unauthorized')]" level="WARN"
				category="${logger.common-mule-config}" doc:name="Unauthorized" />
			<set-property propertyName="Content-Type" value="application/xml"
				doc:name="XML" />
			<set-payload value="&lt;message&gt;Unauthorized&lt;/message&gt;"
				doc:name="Unauthorized" />
		</apikit:mapping>
		 
		
		<apikit:mapping statusCode="404">
			<apikit:exception
				value="org.mule.module.apikit.exception.NotFoundException" />
			<logger message="#[logExc('Resource not found')]" level="INFO"
				category="${logger.common-mule-config}" doc:name="Resource not found" />
			<set-property propertyName="Content-Type" value="application/xml"
				doc:name="XML" />
			<set-payload value="&lt;message&gt;Resource not found&lt;/message&gt;"
				doc:name="Resource not found" />
		</apikit:mapping>
		<apikit:mapping statusCode="405">
			<apikit:exception
				value="org.mule.module.apikit.exception.MethodNotAllowedException" />
			<logger message="#[logExc('Method not allowed')]" level="INFO"
				category="${logger.common-mule-config}" doc:name="Method not allowed" />
			<set-property propertyName="Content-Type" value="application/xml"
				doc:name="XML" />
			<set-payload value="&lt;message&gt;Method not allowed&lt;/message&gt;"
				doc:name="Method not allowed" />
		</apikit:mapping>
		<apikit:mapping statusCode="406">
			<apikit:exception
				value="org.mule.module.apikit.exception.NotAcceptableException" />
			<logger message="#[logExc('Not acceptable')]" level="INFO"
				category="${logger.common-mule-config}" doc:name="Not acceptable" />
			<set-property propertyName="Content-Type" value="application/xml"
				doc:name="XML" />
			<set-payload value="&lt;message&gt;Not acceptable&lt;/message&gt;"
				doc:name="Not acceptable" />
		</apikit:mapping>
		<!-- <apikit:mapping statusCode="409"> <apikit:exception value="org.mule.examples.leagues.exceptions.ConflictException" 
			/> <logger message="#[logExc('conflict exception')]" level="ERROR" category="${logger.common-mule-config}" 
			doc:name="conflict or internal mapping exception" /> <set-property propertyName="Content-Type" 
			value="application/xml" doc:name="XML" /> <set-payload value="&lt;message&gt;Internal 
			mapping error&lt;/message&gt;" doc:name="Internal mapping error" /> <flow-ref 
			name="before-exit-common" doc:name="before exit" /> </apikit:mapping> -->
		<apikit:mapping statusCode="415">
			<apikit:exception
				value="org.mule.module.apikit.exception.UnsupportedMediaTypeException" />
			<logger message="#[logExc('Unsupported media type')]" level="INFO"
				category="${logger.common-mule-config}" doc:name="Unsupported media type" />
			<set-property propertyName="Content-Type" value="application/xml"
				doc:name="XML" />
			<set-payload value="&lt;message&gt;Unsupported media type&lt;/message&gt;"
				doc:name="Unsupported media type" />
		</apikit:mapping>
		<apikit:mapping statusCode="500">
			<apikit:exception value="java.lang.Exception" />
			<logger message="#[logExc('Internal processing error')]"
				level="ERROR" category="${logger.common-mule-config}" doc:name="Internal processing error" />
			<set-property propertyName="Content-Type" value="application/xml"
				doc:name="XML" />
			<set-payload
				value="&lt;message&gt;Internal processing error&lt;/message&gt;"
				doc:name="Internal processing error" />
		</apikit:mapping>
	</apikit:mapping-exception-strategy>
	
	
	<!-- an exception strategy that can be used for all RESTful APIs that return JSON payloads -->
	<apikit:mapping-exception-strategy name="default-exc-strategy-api-json" >
		<apikit:mapping statusCode="400">
			<apikit:exception value="org.mule.module.apikit.exception.BadRequestException" />
			<logger message="#[logExc('Bad request')]" level="INFO" category="${logger.common-mule-config}" doc:name="Bad request" />
			<set-property propertyName="Content-Type" value="application/json" doc:name="JSON" />
			<set-payload value="{ &quot;message&quot;: &quot;Bad request: #[exception.causeException.message]&quot; }" doc:name="Bad request" />
			
		</apikit:mapping>
		<apikit:mapping statusCode="401">
			<apikit:exception value="org.mule.api.security.UnauthorisedException" />
			<logger message="#[logExc('Unauthorized')]" level="WARN" category="${logger.common-mule-config}" doc:name="Unauthorized" />
			<set-property propertyName="Content-Type" value="application/json" doc:name="JSON" />
			<set-payload value="{ &quot;message&quot;: &quot;Invalid security credentials&quot; }" doc:name="Invalid credentials message"/>
			
		</apikit:mapping>
		<apikit:mapping statusCode="403">
            <apikit:exception value="org.mule.api.security.NotPermittedException"/>
            <logger message="#[logExc('security credentials do not have permission')]" level="INFO" category="${logger.common-mule-config}" doc:name="Resource not found" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Current credentials do not permit access to this resource&quot; }" doc:name="Invalid access rights message"/>
        </apikit:mapping>
		
		<apikit:mapping statusCode="403">
            <apikit:exception value="com.fl3x.uitls.InvalidJwtToken"/>
            <logger message="#[logExc('jwt token is either invalid or expired')]" level="INFO" category="${logger.common-mule-config}" doc:name="Resource not found" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;jwt token is either invalid or expired&quot; }" doc:name="Invalid access rights message"/>
        </apikit:mapping>
		
		<apikit:mapping statusCode="404">
			<apikit:exception value="org.mule.module.apikit.exception.NotFoundException" />
			<logger message="#[logExc('Resource not found')]" level="INFO" category="${logger.common-mule-config}" doc:name="Resource not found" />
			<set-property propertyName="Content-Type" value="application/json" doc:name="JSON" />
			<set-payload value="{ &quot;message&quot;: &quot;Resource not found&quot; }" doc:name="Resource not found" />
			
		</apikit:mapping>
		<apikit:mapping statusCode="405">
			<apikit:exception value="org.mule.module.apikit.exception.MethodNotAllowedException" />
			<logger message="#[logExc('Method not allowed')]" level="INFO" category="${logger.common-mule-config}" doc:name="Method not allowed" />
			<set-property propertyName="Content-Type" value="application/json" doc:name="JSON" />
			<set-payload value="{ &quot;message&quot;: &quot;Method not allowed&quot; }" doc:name="Method not allowed" />
			
		</apikit:mapping>
		<apikit:mapping statusCode="406">
			<apikit:exception value="org.mule.module.apikit.exception.NotAcceptableException" />
			<logger message="#[logExc('Not acceptable')]" level="INFO" category="${logger.common-mule-config}" doc:name="Not acceptable" />
			<set-property propertyName="Content-Type" value="application/json" doc:name="JSON" />
			<set-payload value="{ &quot;message&quot;: &quot;Not acceptable&quot; }" doc:name="Not acceptable" />
			
		</apikit:mapping>
		<apikit:mapping statusCode="415">
			<apikit:exception value="org.mule.module.apikit.exception.UnsupportedMediaTypeException" />
			<logger message="#[logExc('Unsupported media type')]" level="INFO" category="${logger.common-mule-config}" doc:name="Unsupported media type" />
			<set-property propertyName="Content-Type" value="application/json" doc:name="JSON" />
			<set-payload value="{ &quot;message&quot;: &quot;Unsupported media type&quot; }" doc:name="Unsupported media type" />
			
		</apikit:mapping>
		<apikit:mapping statusCode="500">
			<apikit:exception value="java.lang.Exception" />
			<logger message="#[logExc('Internal processing error')]" level="ERROR" category="${logger.common-mule-config}" doc:name="Internal processing error" />
			<set-property propertyName="Content-Type" value="application/json" doc:name="JSON" />
			<set-payload value="{ &quot;message&quot;: &quot;Internal processing error&quot; }" doc:name="Internal processing error" />
		</apikit:mapping>
	</apikit:mapping-exception-strategy>
	
	
	
	
	
	
	
	
	<flow name="order-api-console">
		<inbound-endpoint ref="order-api-console-ep" doc:name="http-order"/>
		<apikit:console config-ref="order-api-config"
			doc:name="frontend API console" />
	</flow>
	
	<flow name="order-api-main" processingStrategy="synchronous">
		<inbound-endpoint ref="order-api-ep" doc:name="http-order"/>
        <choice doc:name="Choice">
            <when expression="#[message.inboundProperties.'http.relative.path' == 'token']">
                <logger level="INFO" doc:name="Logger" message="asdfasd"/>
            </when>
            <otherwise>
            	<logger doc:name="Logger"/>
             	<custom-transformer class="com.fl3x.token.ValidateToken" doc:name="java" />
                <scripting:component doc:name="Groovy">
                    <scripting:script engine="Groovy"><![CDATA[import org.mule.api.transport.*;
import com.fl3x.uitls.*;

status = flowVars["payloadfail"];

if ( status == "TRUE") {

throw new com.fl3x.uitls.InvalidJwtToken("asdfjaslkfjnbaslkjf");
}


return payload]]></scripting:script>
                </scripting:component> 
            </otherwise>
        </choice>
		<apikit:router config-ref="order-api-config" doc:name="APIkit Router" />
        <response>
            <logger message="logging final outbound payload #[payload]" level="INFO" category="${logger.order-api}" doc:name="logger"/>
        </response>
		<exception-strategy ref="default-exc-strategy-api-json"
			doc:name="Reference Exception Strategy" />
	</flow>
	
	<flow name="get:/orders:order-api-config"
		processingStrategy="synchronous">
		<logger
			message="#[logIn('entering into invocation of orders bulk retrieve')]"
			level="DEBUG" doc:name="Log inbound" category="${logger.order-api}" />
        <expression-component doc:name="Expression"><![CDATA[sessionVars.sellerId= message.inboundProperties.'http.query.params'.seller;
sessionVars.fromDate=message.inboundProperties.'http.query.params'.fromDate;
sessionVars.toDate=message.inboundProperties.'http.query.params'.toDate;
sessionVars.status=message.inboundProperties.'http.query.params'.status;
sessionVars.format=message.inboundProperties.'http.query.params'.format;]]></expression-component>
			
        <flow-ref name="get-orders-seller" doc:name="get-orders-seller"/>
       <logger message="#[logOut('exiting the invocation of orderId')]" level="INFO" category="${logger.order-api}"  doc:name="logger"/>
        <choice doc:name="Choice">
            <when expression="#[sessionVars.format == 'xml' ]">
                <json:json-to-xml-transformer doc:name="JSON to XML"/>
                
                 <mulexml:xslt-transformer xsl-file="./xslt/prettyPrint.xslt" outputEncoding="UTF-8" maxIdleTransformers="2" maxActiveTransformers="5" doc:name="XSLT"/>
                <byte-array-to-string-transformer doc:name="Byte Array to String"/>
                <message-properties-transformer mimeType="application/xml" doc:name="Message Properties">
                    <add-message-property key="Content-Type" value="application/xml"/>
                    <add-message-property key="Access-Control-Allow-Origin" value="*"/>
                </message-properties-transformer>
                
                <logger message="Response sent in XML format" level="DEBUG" category="${logger.order-api}" doc:name="Logger"/>
            </when>
            <otherwise>
            	<message-properties-transformer mimeType="application/json" doc:name="Message Properties">
                    <add-message-property key="Content-Type" value="application/json"/>
                    <add-message-property key="Access-Control-Allow-Origin" value="*"/>
                </message-properties-transformer>
                <logger message="sending the response as JSON" level="DEBUG" doc:name="Logger"/>
            </otherwise>
        </choice>
        <logger message="#[logOut('Response sent out for Order Extract')]" level="INFO" category="${logger.order-api}"  doc:name="logger"/>
	</flow>



	<flow name="get:/orders/{sellerId}/{orderId}:order-api-config"
		processingStrategy="synchronous">
		<logger
			message="#[logIn('entering into invocation of orderId')]"
			level="INFO" doc:name="Log inbound" category="${logger.order-api}" />
        <expression-component doc:name="Expression"><![CDATA[sessionVars.format=message.inboundProperties.'http.query.params'.format]]></expression-component>
			<logger
			message="value of orderID ****** is #[orderId]"
			level="DEBUG" doc:name="Log inbound" category="${logger.order-api}" />
        <flow-ref name="get-order-sellerid-orderid" doc:name="get-order-orderid"/>
         <choice doc:name="Choice">
            <when expression="#[sessionVars.format == 'xml' ]">
                <json:json-to-xml-transformer doc:name="JSON to XML"/>
                <mulexml:xslt-transformer xsl-file="./xslt/prettyPrint.xslt" outputEncoding="UTF-8" maxIdleTransformers="2" maxActiveTransformers="5" doc:name="XSLT"/>
                <byte-array-to-string-transformer doc:name="Byte Array to String"/>
                <message-properties-transformer mimeType="application/xml" doc:name="Message Properties">
                    <add-message-property key="Content-Type" value="application/xml"/>
                    <add-message-property key="Access-Control-Allow-Origin" value="*"/>
                </message-properties-transformer>
                <logger message="Response sent in XML format" level="DEBUG" category="${logger.order-api}" doc:name="Logger"/>
            </when>
            <otherwise>
            	<message-properties-transformer mimeType="application/json" doc:name="Message Properties">
                    <add-message-property key="Content-Type" value="application/xml"/>
                    <add-message-property key="Access-Control-Allow-Origin" value="*"/>
                </message-properties-transformer>	
                <logger message="sending the response as JSON" level="DEBUG" doc:name="Logger"/>
            </otherwise>
        </choice>
        
       <logger message="#[logOut('exiting the invocation of orderId')]" level="INFO" category="${logger.order-api}"  doc:name="logger"/>
	</flow>
	
	
	
	
	<flow name="put:/orders/{sellerId}/{orderId}:order-api-config"
		processingStrategy="synchronous">
		<logger
			message="#[logIn('entering into creation of Order in the Hub')]"
			level="INFO" doc:name="Log inbound" category="${logger.order-api}" />
			<logger
			message="**********value of orderID is #[orderId] and the value of sellerID is #[sellerId]***********"
			level="DEBUG" doc:name="Log inbound" category="${logger.order-api}" />
        <flow-ref name="put-order-sellerid-orderid" doc:name="put-order-orderid"/>
        <logger message="#[logOut('exiting creation of order')]" level="INFO" category="${logger.order-api}"  doc:name="logger"/>
	</flow>
	
	<flow name="post:/token:order-api-config"
		processingStrategy="synchronous">
		<logger
			message="#[logIn('entering into creation of token')]"
			level="DEBUG" doc:name="Log inbound" category="${logger.order-api}" />
        <flow-ref name="post-token" doc:name="post-token"/>
        <logger message="#[logOut('exiting creation of token')]" level="DEBUG" category="${logger.order-api}"  doc:name="logger"/>
	</flow>



</mule>
